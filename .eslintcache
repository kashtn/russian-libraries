[{"/Users/ivankashtanov/Desktop/Pack/samolet-test/src/components/App/App.tsx":"1","/Users/ivankashtanov/Desktop/Pack/samolet-test/src/redux/actions.ts":"2","/Users/ivankashtanov/Desktop/Pack/samolet-test/src/redux/actionTypes.ts":"3","/Users/ivankashtanov/Desktop/Pack/samolet-test/src/components/LibsComponent/LibsComponent.tsx":"4","/Users/ivankashtanov/Desktop/Pack/samolet-test/src/redux/reducer.ts":"5","/Users/ivankashtanov/Desktop/Pack/samolet-test/src/components/LibsComponent/Library.tsx":"6","/Users/ivankashtanov/Desktop/Pack/samolet-test/src/redux/store.ts":"7","/Users/ivankashtanov/Desktop/Pack/samolet-test/src/index.tsx":"8"},{"size":532,"mtime":1611567739263,"results":"9","hashOfConfig":"10"},{"size":1710,"mtime":1611605904673,"results":"11","hashOfConfig":"10"},{"size":470,"mtime":1611591443535,"results":"12","hashOfConfig":"10"},{"size":4629,"mtime":1611591413796,"results":"13","hashOfConfig":"10"},{"size":741,"mtime":1611580342405,"results":"14","hashOfConfig":"10"},{"size":1412,"mtime":1611570847796,"results":"15","hashOfConfig":"10"},{"size":719,"mtime":1611577259970,"results":"16","hashOfConfig":"10"},{"size":641,"mtime":1611575203241,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1gcje0r",{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ivankashtanov/Desktop/Pack/samolet-test/src/components/App/App.tsx",[],["37","38"],"/Users/ivankashtanov/Desktop/Pack/samolet-test/src/redux/actions.ts",["39","40","41","42"],"/Users/ivankashtanov/Desktop/Pack/samolet-test/src/redux/actionTypes.ts",[],"/Users/ivankashtanov/Desktop/Pack/samolet-test/src/components/LibsComponent/LibsComponent.tsx",["43","44","45","46","47"],"import React, { FC, ReactElement, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {useAppDispatch} from '../../redux/store'\nimport { getAllLibs, filterLibs } from \"../../redux/actions\";\nimport { List, Spin, Input, Button, Popover } from \"antd\";\nimport { StateType } from \"../../redux/reducer\";\nimport { AppState } from \"../../redux/store\";\nimport \"antd/dist/antd.css\";\nimport \"./Libs.scss\";\nimport { Ilib } from \"../../interfaces\";\n\nconst { Search } = Input;\n\ntype LibsComponentType = {\n  children?: never;\n};\n\nconst LibsComponent: FC<LibsComponentType> = (props): ReactElement => {\n  const dispatch = useAppDispatch();\n  const { allLibs, loading } = useSelector<AppState, StateType>(\n    (state) => state\n  );\n  // const { loading } = useSelector((state) => state);\n\n  const [region, setRegion] = useState<string>();\n\n  const libs: Ilib[] = region\n    ? allLibs.filter((lib) => {\n        if (typeof lib.territory === \"string\") {        //!!!!!!!!!!check this out\n          let terrWords:string[] = lib.territory.split(\" \");\n          let flag:boolean = false;\n          terrWords.map((word) => {\n            if (word.toLowerCase().startsWith(region.toLowerCase())) {\n              flag = true;\n            }\n          });\n          if (flag) {\n            return lib;\n          }\n        }\n      })\n    : allLibs;\n\n    // const useLocalStorage = (key: string) => {\n    //   // initialize the value from localStorage\n    //   const [currentValue, setCurrentValue] = useState<string | null>(() =>\n    //     localStorage.getItem(key)\n    //   );\n    \n    //   // update localStorage when the currentValue changes via setCurrentValue\n    //   useEffect(() => {\n    //     localStorage.setItem(key, currentValue);\n    //   }, [key, currentValue]);\n    \n    //   // use as const to tell TypeScript this is a tuple\n    //   return [currentValue, setCurrentValue] as const;\n    // };\n\n  const PreloadedState:string | null = localStorage.getItem(\"redux\");\n  const dispatch1 = useDispatch()\n\n  useEffect(() => {\n    if (PreloadedState && JSON.parse(PreloadedState).allLibs.length < 83 || !PreloadedState) {\n      dispatch1(getAllLibs());\n      // dispatch(getAllLibs());\n    } \n    // else if (!PreloadedState) {\n    //   dispatch(getAllLibs());\n    // }\n  }, [dispatch]);\n\n  const content = (\n    <>\n      <div>\n        <Button\n          type=\"link\"\n          className=\"text\"\n          onClick={() => {\n            dispatch(filterLibs(allLibs, \"toHighest\"));\n          }}\n        >\n          По возрастанию\n        </Button>\n      </div>\n      <div>\n        <Button\n          type=\"link\"\n          className=\"text\"\n          onClick={() => {\n            dispatch(filterLibs(allLibs, \"toLowest\"));\n          }}\n        >\n          По убыванию\n        </Button>\n      </div>\n    </>\n  );\n\n  // function sort() {\n  //   libs.sort((a, b) => {\n  //     console.log(a, b);\n  //     return a.libraries - b.libraries;\n  //   });\n  // }\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"topDataContainer\">\n          <h1 className=\"title\">Библиотеки РФ</h1>\n          <Search\n            placeholder=\"Поиск по региону\"\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              setRegion(event.currentTarget.value);\n            }}\n            style={{ width: 200 }}\n          />\n          <br />\n          <Popover content={content} title={null} trigger=\"click\">\n            <Button className=\"text\" type=\"link\" \n            // onClick={sort}\n            >\n              Сортировать\n            </Button>\n          </Popover>\n        </div>\n        {!loading ? (\n          <>\n            <div className=\"allLibsContainer\">\n              <List\n                dataSource={libs}\n                renderItem={(item) => (\n                  <List.Item key={item.id} className=\"linkField\">\n                    <List.Item.Meta\n                      title={\n                        <Link className=\"link\" to={`/library/${item.order}`}>\n                          <p className=\"text\">{item.fullname}</p>\n                        </Link>\n                      }\n                      description={`Всего библиотек в регионе: ${item.libraries}`}\n                    />\n                  </List.Item>\n                )}\n              ></List>\n            </div>\n          </>\n        ) : (\n          <div className=\"spin\">\n            <Spin />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default LibsComponent;\n","/Users/ivankashtanov/Desktop/Pack/samolet-test/src/redux/reducer.ts",["48"],"import { SET_ALL_LIBS, LOADING, FILTERED, ActionTypes } from \"./actionTypes\";\nimport { Ilib } from \"../interfaces\";\nimport { ThunkAction } from \"redux-thunk\";\n\nexport type StateType = {\n  allLibs: Ilib[];\n  loading: boolean;\n};\n\nconst initialState: StateType = {\n  allLibs: [],\n  loading: false,\n};\n\nexport default function reducer(state = initialState, action: ActionTypes):StateType {\n  switch (action.type) {\n    case LOADING:\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    case SET_ALL_LIBS:\n      return {\n        ...state,\n        allLibs: action.payload,\n      };\n    case FILTERED:\n      return {\n        ...state,\n        allLibs: [...action.payload],\n      };\n    default:\n      return state;\n  }\n}\n","/Users/ivankashtanov/Desktop/Pack/samolet-test/src/components/LibsComponent/Library.tsx",[],"/Users/ivankashtanov/Desktop/Pack/samolet-test/src/redux/store.ts",[],"/Users/ivankashtanov/Desktop/Pack/samolet-test/src/index.tsx",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":12,"column":10,"nodeType":"55","messageId":"56","endLine":12,"endColumn":21},{"ruleId":"53","severity":1,"message":"57","line":12,"column":23,"nodeType":"55","messageId":"56","endLine":12,"endColumn":36},{"ruleId":"53","severity":1,"message":"58","line":13,"column":10,"nodeType":"55","messageId":"56","endLine":13,"endColumn":19},{"ruleId":"53","severity":1,"message":"59","line":58,"column":5,"nodeType":"55","messageId":"56","endLine":58,"endColumn":13},{"ruleId":"60","severity":1,"message":"61","line":29,"column":28,"nodeType":"62","messageId":"63","endLine":29,"endColumn":30},{"ruleId":"60","severity":1,"message":"64","line":33,"column":32,"nodeType":"62","messageId":"65","endLine":33,"endColumn":34},{"ruleId":"66","severity":1,"message":"67","line":64,"column":24,"nodeType":"68","messageId":"69","endLine":64,"endColumn":26},{"ruleId":"66","severity":1,"message":"67","line":64,"column":74,"nodeType":"68","messageId":"69","endLine":64,"endColumn":76},{"ruleId":"70","severity":1,"message":"71","line":71,"column":6,"nodeType":"72","endLine":71,"endColumn":16,"suggestions":"73"},{"ruleId":"53","severity":1,"message":"54","line":3,"column":10,"nodeType":"55","messageId":"56","endLine":3,"endColumn":21},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"@typescript-eslint/no-unused-vars","'ThunkAction' is defined but never used.","Identifier","unusedVar","'ThunkDispatch' is defined but never used.","'AnyAction' is defined but never used.","'filtered' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'PreloadedState' and 'dispatch1'. Either include them or remove the dependency array.","ArrayExpression",["76"],"no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},"Update the dependencies array to be: [PreloadedState, dispatch, dispatch1]",{"range":"79","text":"80"},[2344,2354],"[PreloadedState, dispatch, dispatch1]"]